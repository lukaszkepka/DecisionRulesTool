//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace DecisionRulesTool.Model.RuleTester
{
    using DecisionRulesTool.Model.Model;
    using System.Diagnostics;

    public class ConfusionMatrix
    {
        private ICollection<DecisionClassRow> decisionClassRows;

        public ConfusionMatrix(Attribute decisionAttribute)
        {
            decisionClassRows = new List<DecisionClassRow>();
            string[] availableValues = ClassificationResult.GetDecisionClasses(decisionAttribute);

            for (int i = 0; i < availableValues.Count(); i++)
            {
                decisionClassRows.Add(new DecisionClassRow(availableValues, i));
            }
        }

        public int GetConfusionValue(string realClass, string predictedClass)
        {
            return decisionClassRows.FirstOrDefault(x => x.DecisionClass.Equals(realClass))[predictedClass];
        }

        public void IncrementPredictionCount(string realClass, string predictedClass)
        {
            decisionClassRows.FirstOrDefault(x => x.DecisionClass.Equals(realClass)).IncrementPredictionCount(predictedClass);
        }

        public class DecisionClassRow
        {
            private IDictionary<string, int> predictionHistogram;

            public string DecisionClass { get; }

            public DecisionClassRow(string[] decisionClasses, int classIndex)
            {
                DecisionClass = decisionClasses[classIndex];
                predictionHistogram = new Dictionary<string, int>();

                foreach (var decisionClass in decisionClasses)
                {
                    predictionHistogram.Add(decisionClass, 0);
                }
            }

            public int this[string decisionClass]
            {
                get
                {
                    return predictionHistogram[decisionClass];
                }
            }

            public void IncrementPredictionCount(string decisionClass)
            {
                if (predictionHistogram.ContainsKey(decisionClass))
                {
                    predictionHistogram[decisionClass]++;
                }
                else
                {
                    Debug.WriteLine($"Decision class : {decisionClass} is not valid for confusion matrix");
                }
            }
        }
    }
}

